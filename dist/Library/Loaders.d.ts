import { ComponentProps } from '../EpiComponent';
import * as TypeMapperNS from '../Loaders/BaseTypeMapper';
import * as ComponentNS from '../Loaders/ComponentLoader';
import IContent from '../Models/IContent';
export declare const ComponentLoader: typeof ComponentNS.ComponentLoader;
export type IComponentLoader = ComponentNS.IComponentLoader;
export type IComponentLoaderType = ComponentNS.IComponentLoaderType;
export type IComponentLoaderConfig = ComponentNS.IComponentLoaderConfig;
export type IComponentLoaderList = ComponentNS.IComponentLoaderList;
export type TComponentType<T extends unknown = ComponentProps<IContent>> = ComponentNS.TComponentType<T>;
export type TComponentTypePromise<T extends unknown = ComponentProps<IContent>> = ComponentNS.TComponentTypePromise<T>;
export declare const BaseTypeMapper: typeof TypeMapperNS.BaseTypeMapper;
export type TypeMapper = TypeMapperNS.TypeMapperType;
export type TypeInfo = TypeMapperNS.TypeMapperTypeInfo;
export declare const isComponentLoader: (toTest: ComponentNS.IComponentLoader | ComponentNS.IComponentLoaderType) => toTest is ComponentNS.IComponentLoader;
export default ComponentLoader;
